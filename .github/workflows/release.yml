name: Manual Package Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version to release (e.g., 0.2.2)'
        required: true
        type: string
      skip_testpypi:
        description: 'Skip TestPyPI and go directly to PyPI'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for tagging

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: latest

      - name: Install dependencies
        run: |
          uv sync
          uv run pip install --upgrade pip

      - name: Validate version format
        run: |
          # Validate version format (semantic versioning)
          if [[ ! "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Error: Version must be in format X.Y.Z (e.g., 0.2.2)"
            exit 1
          fi
          echo "‚úÖ Version format validated: ${{ inputs.version }}"

      - name: Run tests
        run: |
          uv run pytest --cov=zenodotos --cov-report=html
          uv run ruff check .
          uv run ruff format --check .
          uv run ty .

      - name: Update version in pyproject.toml
        run: |
          # Update version in pyproject.toml
          sed -i 's/^version = ".*"/version = "${{ inputs.version }}"/' pyproject.toml

          # Update uv.lock
          uv lock

          # Show the changes
          echo "Updated pyproject.toml:"
          grep '^version = ' pyproject.toml
          echo "Updated uv.lock"

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml uv.lock
          git commit -m "feat(release): bump version to ${{ inputs.version }}"
          git push origin ${{ github.ref }}

      - name: TestPyPI Release
        if: ${{ !inputs.skip_testpypi }}
        run: |
          echo "üöÄ Publishing to TestPyPI..."
          ./scripts/release.sh --testpypi
        env:
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}

      - name: Wait for TestPyPI propagation
        if: ${{ !inputs.skip_testpypi }}
        run: |
          echo "‚è≥ Waiting for TestPyPI propagation..."
          sleep 30  # Initial wait

      - name: Check TestPyPI availability
        if: ${{ !inputs.skip_testpypi }}
        run: |
          echo "üîç Checking TestPyPI availability..."
          ./scripts/check-package-availability.sh --testpypi --wait zenodotos ${{ inputs.version }}
        env:
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}

      - name: Test TestPyPI installation
        if: ${{ !inputs.skip_testpypi }}
        run: |
          echo "üß™ Testing TestPyPI installation..."
          ./scripts/test-package-install.sh --testpypi zenodotos ${{ inputs.version }}

      - name: PyPI Release
        run: |
          echo "üöÄ Publishing to PyPI..."
          ./scripts/release.sh --pypi
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

      - name: Wait for PyPI propagation
        run: |
          echo "‚è≥ Waiting for PyPI propagation..."
          sleep 60  # Initial wait for PyPI

      - name: Check PyPI availability
        run: |
          echo "üîç Checking PyPI availability..."
          ./scripts/check-package-availability.sh --pypi --wait zenodotos ${{ inputs.version }}
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

      - name: Test PyPI installation
        run: |
          echo "üß™ Testing PyPI installation..."
          ./scripts/test-package-install.sh --pypi zenodotos ${{ inputs.version }}

      - name: Create and push Git tag
        run: |
          echo "üè∑Ô∏è Creating Git tag v${{ inputs.version }}..."
          git tag v${{ inputs.version }}
          git push origin v${{ inputs.version }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ inputs.version }}
          release_name: Release v${{ inputs.version }}
          body: |
            ## Release v${{ inputs.version }}

            This release was automatically created by the GitHub Actions workflow.

            ### Changes
            - Version bump to ${{ inputs.version }}
            - Automated release process

            ### Verification
            - ‚úÖ Published to TestPyPI
            - ‚úÖ TestPyPI availability confirmed
            - ‚úÖ TestPyPI installation tested
            - ‚úÖ Published to PyPI
            - ‚úÖ PyPI availability confirmed
            - ‚úÖ PyPI installation tested

            ### Installation
            ```bash
            pip install zenodotos==${{ inputs.version }}
            ```
          draft: false
          prerelease: false

      - name: Success message
        run: |
          echo "üéâ Release v${{ inputs.version }} completed successfully!"
          echo ""
          echo "üì¶ Package is available on PyPI:"
          echo "   https://pypi.org/project/zenodotos/${{ inputs.version }}/"
          echo ""
          echo "üè∑Ô∏è Git tag created: v${{ inputs.version }}"
          echo ""
          echo "üìã Release created:"
          echo "   https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.version }}"
